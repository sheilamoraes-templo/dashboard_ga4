from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime
import logging
from src.ga4_client import GA4Client
from src.email_sender import EmailSender
from src.slack_client import SlackClient
from src.ai_analyzer import AIAnalyzer
from config.settings import REPORT_FREQUENCY, SLACK_REPORTS_ENABLED

class AutomationManager:
    def __init__(self):
        """Inicializa o gerenciador de automa√ß√£o"""
        self.scheduler = BackgroundScheduler()
        self.ga4_client = GA4Client()
        self.email_sender = EmailSender()
        self.slack_client = SlackClient()
        self.ai_analyzer = AIAnalyzer()
        
        # Configurar logging
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        
    def start_scheduler(self):
        """Inicia o agendador de tarefas"""
        try:
            if not self.scheduler.running:
                self.scheduler.start()
                self.logger.info("‚úÖ Agendador iniciado com sucesso")
                
                # Configurar jobs baseado na frequ√™ncia
                self._setup_jobs()
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao iniciar agendador: {e}")
    
    def stop_scheduler(self):
        """Para o agendador de tarefas"""
        try:
            if self.scheduler.running:
                self.scheduler.shutdown()
                self.logger.info("üõë Agendador parado")
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao parar agendador: {e}")
    
    def _setup_jobs(self):
        """Configura os jobs agendados"""
        try:
            # Limpar jobs existentes
            self.scheduler.remove_all_jobs()
            
            # Configurar baseado na frequ√™ncia
            if REPORT_FREQUENCY == "daily":
                # Relat√≥rio di√°rio √†s 8h
                self.scheduler.add_job(
                    self._send_daily_report,
                    CronTrigger(hour=8, minute=0),
                    id='daily_report',
                    name='Relat√≥rio Di√°rio GA4'
                )
                self.logger.info("üìÖ Relat√≥rio di√°rio agendado para 8h")
                
            elif REPORT_FREQUENCY == "weekly":
                # Relat√≥rio semanal √†s 9h de segunda-feira
                self.scheduler.add_job(
                    self._send_weekly_report,
                    CronTrigger(day_of_week='mon', hour=9, minute=0),
                    id='weekly_report',
                    name='Relat√≥rio Semanal GA4'
                )
                self.logger.info("üìÖ Relat√≥rio semanal agendado para segunda-feira √†s 9h")
                
            elif REPORT_FREQUENCY == "monthly":
                # Relat√≥rio mensal no primeiro dia do m√™s √†s 10h
                self.scheduler.add_job(
                    self._send_monthly_report,
                    CronTrigger(day=1, hour=10, minute=0),
                    id='monthly_report',
                    name='Relat√≥rio Mensal GA4'
                )
                self.logger.info("üìÖ Relat√≥rio mensal agendado para o primeiro dia do m√™s √†s 10h")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao configurar jobs: {e}")
    
    def _send_daily_report(self):
        """Envia relat√≥rio di√°rio"""
        try:
            self.logger.info("üìä Iniciando relat√≥rio di√°rio...")
            
            # Obter dados
            metrics = self.ga4_client.get_basic_metrics(days=1)
            daily_data = self.ga4_client.get_daily_metrics(days=7)  # √öltimos 7 dias para contexto
            top_pages = self.ga4_client.get_top_pages(days=1, limit=5)
            
            if metrics:
                # Gerar insights de IA
                insights = self.ai_analyzer.analyze_metrics(metrics)
                
                # Enviar via Slack (priorit√°rio)
                slack_success = False
                if SLACK_REPORTS_ENABLED:
                    slack_success = self.slack_client.send_daily_report(metrics, daily_data, top_pages, insights)
                
                # Fallback para email se Slack falhar
                email_success = False
                if not slack_success:
                    email_success = self.email_sender.send_daily_report(metrics, daily_data, top_pages)
                
                if slack_success:
                    self.logger.info("‚úÖ Relat√≥rio di√°rio enviado via Slack com sucesso")
                elif email_success:
                    self.logger.info("‚úÖ Relat√≥rio di√°rio enviado via email com sucesso")
                else:
                    self.logger.error("‚ùå Falha ao enviar relat√≥rio di√°rio (Slack e Email)")
            else:
                self.logger.error("‚ùå N√£o foi poss√≠vel obter dados para relat√≥rio di√°rio")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro no relat√≥rio di√°rio: {e}")
    
    def _send_weekly_report(self):
        """Envia relat√≥rio semanal"""
        try:
            self.logger.info("üìä Iniciando relat√≥rio semanal...")
            
            # Obter dados
            metrics = self.ga4_client.get_basic_metrics(days=7)
            daily_data = self.ga4_client.get_daily_metrics(days=7)
            top_pages = self.ga4_client.get_top_pages(days=7, limit=10)
            
            if metrics:
                # Gerar insights de IA
                insights = self.ai_analyzer.analyze_metrics(metrics)
                
                # Enviar via Slack (priorit√°rio)
                slack_success = False
                if SLACK_REPORTS_ENABLED:
                    slack_success = self.slack_client.send_weekly_report(metrics, daily_data, top_pages, insights)
                
                # Fallback para email se Slack falhar
                email_success = False
                if not slack_success:
                    email_success = self.email_sender.send_weekly_report(metrics, daily_data, top_pages)
                
                if slack_success:
                    self.logger.info("‚úÖ Relat√≥rio semanal enviado via Slack com sucesso")
                elif email_success:
                    self.logger.info("‚úÖ Relat√≥rio semanal enviado via email com sucesso")
                else:
                    self.logger.error("‚ùå Falha ao enviar relat√≥rio semanal (Slack e Email)")
            else:
                self.logger.error("‚ùå N√£o foi poss√≠vel obter dados para relat√≥rio semanal")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro no relat√≥rio semanal: {e}")
    
    def _send_monthly_report(self):
        """Envia relat√≥rio mensal"""
        try:
            self.logger.info("üìä Iniciando relat√≥rio mensal...")
            
            # Obter dados
            metrics = self.ga4_client.get_basic_metrics(days=30)
            daily_data = self.ga4_client.get_daily_metrics(days=30)
            top_pages = self.ga4_client.get_top_pages(days=30, limit=15)
            
            if metrics:
                # Gerar insights de IA
                insights = self.ai_analyzer.analyze_metrics(metrics)
                
                # Enviar via Slack (priorit√°rio)
                slack_success = False
                if SLACK_REPORTS_ENABLED:
                    slack_success = self.slack_client.send_monthly_report(metrics, daily_data, top_pages, insights)
                
                # Fallback para email se Slack falhar
                email_success = False
                if not slack_success:
                    email_success = self.email_sender.send_weekly_report(metrics, daily_data, top_pages)  # Reutiliza fun√ß√£o semanal
                
                if slack_success:
                    self.logger.info("‚úÖ Relat√≥rio mensal enviado via Slack com sucesso")
                elif email_success:
                    self.logger.info("‚úÖ Relat√≥rio mensal enviado via email com sucesso")
                else:
                    self.logger.error("‚ùå Falha ao enviar relat√≥rio mensal (Slack e Email)")
            else:
                self.logger.error("‚ùå N√£o foi poss√≠vel obter dados para relat√≥rio mensal")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro no relat√≥rio mensal: {e}")
    
    def send_manual_report(self, report_type="daily"):
        """Envia relat√≥rio manual"""
        try:
            self.logger.info(f"üìä Enviando relat√≥rio manual ({report_type})...")
            
            if report_type == "daily":
                self._send_daily_report()
            elif report_type == "weekly":
                self._send_weekly_report()
            elif report_type == "monthly":
                self._send_monthly_report()
            else:
                self.logger.error(f"‚ùå Tipo de relat√≥rio inv√°lido: {report_type}")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro no relat√≥rio manual: {e}")
    
    def get_scheduler_status(self):
        """Retorna status do agendador"""
        return {
            'running': self.scheduler.running,
            'jobs': [job.name for job in self.scheduler.get_jobs()],
            'next_run': [job.next_run_time for job in self.scheduler.get_jobs()]
        }
